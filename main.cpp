#include <iostream>
#include <string>
#include <cstdlib> //Library for Random Function
#include <ctime>  //Library for time from device used in Random Function

using namespace std;

// Function to take input of Credentials as Reference value
void credentials(float &initial_balance, string &Name , int &NIC, string &Address);

// These are 2 Pre-Programmed Players for playing the game when you are not a new player
void player1(float & initial_balance,string &Name , int &NIC, string &Address);
void player2(float & initial_balance,string &Name , int &NIC, string &Address);

// These are Random Value Generating Functions
void dice(int &Dice);
void Random_Player(int &player_no);
void Random_Player2(int &player_no2);
void rand_money(int &Ran_money);

//This is the Normal Game Function
void game(int player_no, float &betting_amount,float &winning_amount,float &table_money,int Dice, float &initial_balance,int Guess_num,int &player_no2,int &Ran_money,char YorN,int &GTX,string &Name);

//This the Golden Table Function for Winners
void Golden_Table(int player_no,float &betting_amount,float &winning_amount,float &table_money,int Dice, float &initial_balance,int Guess_num,int &player_no2,int &Ran_money,char YorN,int &GTX);

//This Function handles all money related transactions
void Money_handling(float &initial_balance, string &Name , float table_money , float winning_amount);


int main() {
    
    float initial_balance = 0.0; //Balance is Updated by reference and stored
    string Name = " ";//Name is Updated by reference and stored
    int NIC = 0;//NIC is Updated by reference and stored
    string Address = " ";//Address is Updated by reference and stored
    int Dice = 1; // Random Dice Number is updated by reference and stored
    char YorN = 'a'; //Choice Input Yes or No as single Character and stored
    int player_no = 1; //Random Player Number is Generated by reference and stored
    int player_no2 = 2;//Random Player Number is Generated by reference and stored
    int Ran_money = 10 ;//Random Money is Generated by reference and stored
    float table_money = 20000.0;// Table Money is updated by reference and stored Table Needs Money so it dosen't go into negative
    float betting_amount = 0.0;// Betting Money is updated by reference and stored
    float winning_amount = 0.0 ;// Winning Money is updated by reference and stored
    int Guess_num = 0; //Guess Number is Updated by reference and stored
    int GTX = 1; // Counter for Golden Table
    
    srand(time(0)); // Random Value Generating Algorithm
   
    cout<<"-----------------Welcome to the Game House--------------";
    cout<<"\nNew To the House [y/n] : ";
    cin>>YorN;
    
    if (YorN == 'y'|| YorN == 'Y'){
        credentials(initial_balance,Name,NIC,Address);
        do{
            dice(Dice);
            Random_Player(player_no);
            Random_Player2(player_no2);
            rand_money(Ran_money);
        game(player_no,betting_amount,winning_amount,table_money,Dice,initial_balance,Guess_num,player_no2,Ran_money,YorN,GTX,Name);
            
            if(GTX == 0){
                do{
                dice(Dice);
                Random_Player(player_no);
                Random_Player2(player_no2);
                rand_money(Ran_money);
                    Golden_Table(player_no,betting_amount,winning_amount,table_money,Dice,initial_balance,Guess_num,player_no2,Ran_money,YorN,GTX);
                    
                    
                } while(GTX != 3);
                        }
            
            
        cout<<"Do you want to play again [y/n] \n";
            cin>>YorN;  } while ((YorN == 'y'||  YorN == 'Y') && initial_balance >0.0);
        
    }
    else if(YorN == 'n'|| YorN == 'N') {
        cout<<"Enter the Account Name you Inititally Signed up with \n";
        cin.ignore();
        getline(cin,Name);
        cout<<"Enter the NIC you Inititally Signed up with \n";
        cin>>NIC;
        cout<<"\n\n";
        
        if (Name == "Ahmed" && NIC == 123){
            player1(initial_balance,Name,NIC,Address);
            do{
                dice(Dice);
                Random_Player(player_no);
                Random_Player2(player_no2);
                rand_money(Ran_money);
            game(player_no,betting_amount,winning_amount,table_money,Dice,initial_balance,Guess_num,player_no2,Ran_money,YorN,GTX,Name);
                
                if(GTX == 0){
                    do{
                    dice(Dice);
                    Random_Player(player_no);
                    Random_Player2(player_no2);
                    rand_money(Ran_money);
                        Golden_Table(player_no,betting_amount,winning_amount,table_money,Dice,initial_balance,Guess_num,player_no2,Ran_money,YorN,GTX);
                        
                        
                    } while(GTX != 3);
                            }
                
                
            cout<<"Do you want to play again [y/n] \n";
                cin>>YorN;
                
            } while ((YorN == 'y'||  YorN == 'Y') && initial_balance >0.0);
            
            
            
        }
       else if (Name == "Umair" && NIC == 456){
            player2(initial_balance,Name,NIC,Address);
           do{
               dice(Dice);
               Random_Player(player_no);
               Random_Player2(player_no2);
               rand_money(Ran_money);
           game(player_no,betting_amount,winning_amount,table_money,Dice,initial_balance,Guess_num,player_no2,Ran_money,YorN,GTX,Name);
               
               if(GTX == 0){
                   do{
                   dice(Dice);
                   Random_Player(player_no);
                   Random_Player2(player_no2);
                   rand_money(Ran_money);
                       Golden_Table(player_no,betting_amount,winning_amount,table_money,Dice,initial_balance,Guess_num,player_no2,Ran_money,YorN,GTX);
                       
                       
                   } while(GTX != 3);
                           }
               
              
           cout<<"Do you want to play again [y/n] \n";
               cin>>YorN;  } while ((YorN == 'y'||  YorN == 'Y') && initial_balance >0.0);
        }
       else {
           cout<<"Sorry!!! You are not in our Database You need to sign up again \n";
           credentials(initial_balance,Name,NIC,Address);
           do{
               dice(Dice);
               Random_Player(player_no);
               Random_Player2(player_no2);
               rand_money(Ran_money);
           game(player_no,betting_amount,winning_amount,table_money,Dice,initial_balance,Guess_num,player_no2,Ran_money,YorN,GTX,Name);
               
               if(GTX == 0){
                   do{
                   dice(Dice);
                   Random_Player(player_no);
                   Random_Player2(player_no2);
                   rand_money(Ran_money);
                       Golden_Table(player_no,betting_amount,winning_amount,table_money,Dice,initial_balance,Guess_num,player_no2,Ran_money,YorN,GTX);
                       
                       
                   } while(GTX != 3);
                           }
               
               
           cout<<"Do you want to play again [y/n] \n";
               cin>>YorN;  } while ( (YorN == 'y'||  YorN == 'Y') && initial_balance >0.0 );
       }
    }
   
    Money_handling(initial_balance, Name , table_money , winning_amount );
    
    return 0;
}

//Takes INPUT of different Credentials
void credentials(float &initial_balance, string &Name, int &NIC, string &Address){
    cout<<"You need to sign up first.... \n";
    cout<<"Enter Name: ";
    cin.ignore(); // Igonres newline character so getline can take input
    getline(cin,Name);
   
    cout<<"Enter NIC: ";
    cin>>NIC;
    
    cout<<"Enter Address: ";
    cin.ignore();// Igonres newline character so getline can take input
    getline(cin,Address);
    
    cout<<"Enter Initial Balance \n$";
    cin>>initial_balance;
    
    cout<<"Sign up Sucessfull... \n";
}
// If you enter the name and nic descibed in these functions you can play as those players

void player1(float & initial_balance,string &Name , int &NIC, string &Address){
    Name = "Ahmed";
    initial_balance = 1000;
    NIC = 123;
    Address = " Apartment 567 East Avenue ";
    
    cout<<"Welcome Back to the Game House "<<Name<<endl;
    cout<<"Your Balance is $"<<initial_balance<<endl;
    cout<<"Your NIC is "<<NIC<<endl;
    cout<<"Your Address is"<<Address<<endl;
    
}

void player2(float & initial_balance,string &Name , int &NIC, string &Address){
    Name = "Umair";
    initial_balance = 1500;
    NIC = 456;
    Address = " Apartment 567 East Avenue ";
    
    cout<<"Welcome Back to the Game House "<<Name<<endl;
    cout<<"Your Balance is $"<<initial_balance<<endl;
    cout<<"Your NIC is "<<NIC<<endl;
    cout<<"Your Address is"<<Address<<endl;
    
}

// These are Random Value Generating Functions
void dice(int & Dice){
    Dice = 1+(rand()%6);
   
}
void Random_Player(int &player_no){
    player_no = 2+(rand()%3);
    
    
}
void Random_Player2(int &player_no2){
    player_no2 = 2+(rand()%2);
    
}
void rand_money(int &Ran_money){
    Ran_money = 10+(rand()%50);
    
}

void game(int player_no,float &betting_amount,float&winning_amount,float &table_money,int Dice, float &initial_balance,int Guess_num,int &player_no2,int &Ran_money,char YorN,int &GTX,string &Name){
    
    //Instructions for user
    cout<<"You will be at Playing Table No "<<player_no+1<<" with " <<player_no<<" Players"<<endl;
    cout<<"You are player-"<<player_no2<<"..."<<endl;
    cout<<"\n\nRound Begains....\n";
    //Generates Random Numbers and Playing Amount for players before your Turn
    for (int i = 1 ; i < player_no2 ; i++){
        cout<<"Number for player no "<<i<<" is "<<i+1<<endl;
        cout<<"Betting Amount for player no "<<i<<" is $"<<Ran_money*i<<endl; }
   
    cout<<"Guess Number b/w 1 and 6 \n";cin>>Guess_num;
    cout<<"Enter Betting Amount : $";cin>>betting_amount;
    
    // Condition For Betting Amount
    while(betting_amount > initial_balance ){
        cout<<"Can't bet more than what you have Your Balance is $"<<initial_balance<< " RE-Enter Betting Amount if you wish to continue \n $";cin>>betting_amount;
    }
    //Your Turn
    cout<<"Number for player no "<<player_no2<<" is "<<Guess_num<<endl;
    cout<<"Betting Amount for player no "<<player_no2<<" is $"<<betting_amount<<endl;
    
    //Generates Random Numbers and Playing Amount for players After Your Turn
    for (int i = player_no2+1 ; i <= player_no+1 ; i++){
        cout<<"Number for player no "<<i<<" is "<<i+1<<endl;
        cout<<"Betting Amount for player no "<<i<<" is $"<<Ran_money*i<<endl; }
   
    if(betting_amount <= initial_balance){
         table_money = table_money + betting_amount;
        if (Guess_num == Dice){
            cout<<"Number on the Rolling: "<<Dice<<endl;
            cout<<"Player-"<<player_no2<<" wins\n";
            cout<<"Round Ends....\n\n\n";
            cout<<"Congrats....... You have won.... \n";
            
            initial_balance = initial_balance + betting_amount*2;
            table_money = table_money - betting_amount*2;
            winning_amount = winning_amount + betting_amount*2;
            
            cout<<"Your Remaning Balance is $"<<initial_balance<<"....\n\n\n";
            cout<<endl;
            cout<<"Want to play at Golden Table [y/n] \n";
            cin>>YorN;
            // If the Winner wants to play at Golden Table GTX becomes 0 which then Runs the Golden_Table Function
            if(YorN == 'y'|| YorN == 'Y'){ GTX = 0; }
            
        } else {
            cout<<"Number on the Rolling: "<<Dice<<endl;
            cout<<"Nobody Wins \n";cout<<"Round Ends....\n\n\n";
            initial_balance = initial_balance - betting_amount;
            winning_amount = winning_amount - betting_amount;
            cout<<"Your Remaning Balance is $"<<initial_balance<<"....\n\n\n";
        }
       
    }
    
}

void Golden_Table(int player_no,float &betting_amount,float &winning_amount,float &table_money,int Dice, float &initial_balance,int Guess_num,int &player_no2,int &Ran_money,char YorN,int &GTX){
    
    //Instructions for user
    cout<<"\n\n\nYou will be Playing at Golden Table No "<<player_no+1<<" with " <<player_no<<" Players"<<endl;
    cout<<"You are player no "<<player_no2<<endl;
    cout<<"\n\nRound Begains....\n";
    //Generates Random Numbers and Playing Amount for players before your Turn
    for (int i = 1 ; i < player_no2 ; i++){
        cout<<"Number for player no "<<i<<" is "<<i+1<<endl;
        cout<<"Betting Amount for player no "<<i<<" is $"<<Ran_money*i<<endl; }
    
    cout<<"Guess Number b/w 1 and 6 \n";cin>>Guess_num;
    cout<<"Enter Betting Amount : $";cin>>betting_amount;
    // Conditions For Betting Amount
    if (GTX == 0){
    while(betting_amount > initial_balance/3 ){
        
        cout<<"Your Balance is $"<<initial_balance<< " You have 2 more Rounds so bet accordingly \n$";cin>>betting_amount; }
    }
    else { while(betting_amount >= initial_balance ){
        
cout<<"Can't bet this amount Your Balance is $"<<initial_balance<< "RE-Enter Betting Amount if you wish to continue  \n $";cin>>betting_amount; }
    }
   // Your Turn
    cout<<"Number for player no "<<player_no2<<" is "<<Guess_num<<endl;
    cout<<"Betting Amount for player no "<<player_no2<<" is $"<<betting_amount<<endl;
    
    //Generates Random Numbers and Playing Amount for players After Your Turn
    for (int i = player_no2+1 ; i <= player_no+1 ; i++){
        cout<<"Number for player no "<<i<<" is "<<i+1<<endl;
        cout<<"Betting Amount for player no "<<i<<" is $"<<Ran_money*i<<endl; }
   
    if(betting_amount <= initial_balance){
         table_money = table_money + betting_amount;
        if (Guess_num == Dice){
            cout<<"Number on the Rolling: "<<Dice<<endl;
            cout<<"Player-"<<player_no2<<" wins\n";
            cout<<"Round Ends....\n\n\n";
            cout<<"Congrats....... You have won.... \n";
            
            initial_balance = initial_balance + betting_amount*4;
            table_money = table_money - betting_amount*4;
            winning_amount = winning_amount + betting_amount*4;
            
            cout<<"Your Remaning Balance is $"<<initial_balance<<"....\n\n\n";
            cout<<endl;
            
        } else {
            cout<<"Number on the Rolling: "<<Dice<<endl;
            cout<<"Nobody Wins \n";cout<<"Round Ends....\n\n\n";
            initial_balance = initial_balance - betting_amount;
            winning_amount = winning_amount - betting_amount;
            cout<<"Your Remaning Balance is $"<<initial_balance<<"....\n\n\n";
        }
       
    }
    //GTX Counter To Stop While Loop
    GTX = GTX + 1;
    
}
//Handles Money can also output Tables Money
void Money_handling(float &initial_balance, string &Name , float table_money , float winning_amount){
    
    int x = 0; // Variable for Switch Satements Choice
    int Account_num = 0 ; // Dummy Varible for taking Account Number
    
    if (initial_balance == 0){
        cout<<"Sorry!!! Can't play anymore out of money....\n";
    }
    cout<<"Your Final  Balance is $"<<initial_balance<<endl;
    if(winning_amount<0){
        cout<<"The Amount You Lost is $"<<winning_amount*-1<<endl;}
    
    if(winning_amount == 0){
        cout<<"You have Won Nothing and Lost Nothing \n"; }
    
    if(winning_amount>0){
        
        cout<<"The Amount You Won is $"<<winning_amount<<endl;
        
        initial_balance = initial_balance - initial_balance*0.05;
        cout<<"Your Balance after 5% Tax Dedduction is $"<<initial_balance<<endl;
        
        cout<<"Press 1 for Bank Transfer \nPress 2 receving a cheque \n"; cin>>x;
        switch (x) {
                
            case 1:
                cout<<"Enter the Account Number you want to transfer the money "; cin>>Account_num;
                
                cout<<"The amount of $"<<initial_balance<<" has been transffered to account number "<<Account_num<<" on the Name of "<<Name<<endl;
                break;
            case 2:
                cout<<"cheque for $"<<initial_balance<<" has been issued on the Name of " <<Name<<endl;
                break;
                
            default:
                
                while(x != 1 || x != 2){
                    cout<<"INVALAID INPUT!!! TRY AGAIN \n";
                    cin>>x;
                }
                break;
        }
        
    }
    
}
